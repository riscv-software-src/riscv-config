
Vendor: {type: string}

Device: {type: string}


hart_schema:
  type : dict
  schema: 
    ISA: { type: string, required: true, check_with: capture_isa_specifics, 
           regex: "^RV(32|64|128)[IE]+[ACDEFGIJLMNPQSTUVX]*(Zicsr|Zifencei|Zam|Ztso|){,1}(_Zifencei){,1}(_Zam){,1}(_Ztso){,1}$" }
    User_Spec_Version: {type: string,  default: '2.2', required: true, check_with: user_version_check}
    Privilege_Spec_Version: { type: string, default: '1.10', required: true, 
                              check_with: priv_version_check}
    hw_data_misaligned_support: {type: boolean, default: false}
    supported_xlen:
      type: list
      schema: { type: integer, allowed: [ 32, 64, 128] }
      required: true
    schema_node:
      type: dict
      allow_unknown: false
      noneof:
      - schema:
          warl: &ref_warl
            type: dict
            schema:
              dependency_fields:
                type: list
                empty: true
                schema:
                  type: string
                  nullable: true
              legal:
                type: list
                schema:
                  type: string
              wr_illegal:
                type: list
                schema:
                  type: string
      - 
        schema:
          wlrl: &ref_wlrl
            type: list
            schema:
              type: string
              regex: (^0x[012456789abcdef]+:0x[0123456789abcdef]+$)|(^[0-9]+:[0-9]+$)|(^[0-9]+$)|(^0x[012456789abcdef]+$)
    gen_flatschema:
      schema:  &gen_flatschema
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer,  default: 0}
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              - schema: { warl: *ref_warl }
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with: rv32_check
          default: {accessible: True}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max: 0xFFFFFFFFFFFFFFFF}}
              - schema: { warl: *ref_warl }
              default:
                ro_constant: 0
            accessible:
              default: true
              check_with: rv64_check
          default: {accessible: True}
    gen_flatschema32:
      schema:  &gen_flatschema32
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  0xFFFFFFFF }}
              - schema: { warl: *ref_warl }
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with: rv32_check
          default: {accessible: True}
        rv64:
          type: dict
          schema:
            accessible:
              default: False
          default: {accessible: False}
    misa:
      type: dict
      schema:
        description: {type: string,  default: misa is a read-write register reporting the ISA supported by the hart.}
        address: { type: integer, default: 769, allowed: [769] }
        priv_mode: { type: string, allowed: [M], default: M }
        reset-val: { type: integer, default: 0, check_with: max_length }
        rv32:
          type: dict
          schema:
            fields: { type: list, default: [] }
            mxl:
              type: dict
              schema:
                description: {type: string,  default: Encodes the native base integer ISA width.}
                shadow: {type: string, default: , nullable: True}
                msb: { type: integer, default: 31, allowed: [31] }
                lsb: { type: integer, default: 30, allowed: [30] }
                implemented: { type: boolean, default: false }
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: {ro_constant: {type: integer, max: 0x3, min: 0x1}}
                    - schema: {ro_variable: {type: boolean}}
                    - schema: { warl: *ref_warl }
              default: {implemented: false}
            extensions:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the presence of the standard extensions, with a single
                    bit per letter of the alphabet.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 25, allowed: [25]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: false}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  0x3ffffff}}
                  - schema: {ro_variable: {type: boolean}}
                  - schema: { warl: *ref_warl }
              default: {implemented: false}
            accessible:
              type: boolean
              default: true
              check_with: [rv32_check, cannot_be_false_rv32]
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            mxl:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the native base integer ISA width.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 63, allowed: [63]}
                lsb: {type: integer, default: 62, allowed: [62]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  3, min: 1}}
                  - schema: {ro_variable: {type: boolean}}
                  - schema: { warl: *ref_warl }
              default: {implemented: false}
            extensions:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the presence of the standard extensions, with a single
                    bit per letter of the alphabet.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 25, allowed: [25]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  0x3ffffff}}
                  - schema: {ro_variable: {type: boolean}}
                  - schema: { warl: *ref_warl }
              default: {implemented: false}
            accessible:
              type: boolean
              default: true
              check_with: [rv64_check, cannot_be_false_rv64]
          default: {accessible: false}
    mstatus:
      type: dict
      schema:
        description:
          type: string
          default: The mstatus register keeps track of and controls the hartâ€™s current
            operating state.
        address: {type: integer, default: 768, allowed: [768]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          check_with: max_length
          default: 0
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            uie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the user mode interrupts.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 0, allowed: [0]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default: 
                    wlrl: [0:1]
              default: {implemented: false}
            sie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the supervisor mode interrupts.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 1, allowed: [1]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            mie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the machine mode interrupts.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 3, allowed: [3]}
                lsb: {type: integer, default: 3, allowed: [3]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: true}
            upie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the user mode interrupts prior to the trap.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 4, allowed: [4]}
                lsb: {type: integer, default: 4, allowed: [4]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            spie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the supervisor mode interrupts prior to
                    the trap.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 5, allowed: [5]}
                lsb: {type: integer, default: 5, allowed: [5]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
              default: {implemented: false}
            mpie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the machine mode interrupts prior to the
                    trap.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 7, allowed: [7]}
                lsb: {type: integer, default: 7, allowed: [7]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: true}
            spp:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the previous priority mode for supervisor.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 8, allowed: [8]}
                lsb: {type: integer, default: 8, allowed: [8]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
              default: {implemented: false}
            mpp:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the previous priority mode for machine.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 12, allowed: [12]}
                lsb: {type: integer, default: 11, allowed: [11]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - "0"
              default: {implemented: true}
            fs:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the status of the floating-point unit, including the
                    CSR fcsr and floating-point data registers.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 14, allowed: [14]}
                lsb: {type: integer, default: 13, allowed: [13]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 0, min: 0 }}
                  - schema: { warl: *ref_warl }
              default: {implemented: false}
            xs:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the status of additional user-mode extensions and associated
                    state.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 16, allowed: [16]}
                lsb: {type: integer, default: 15, allowed: [15]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: {ro_variable: {type: boolean}}
                  default: {ro_variable: True}
                  readonly: true
              default: {implemented: false}
            mprv:
              type: dict
              schema:
                description:
                  type: string
                  default: Modifies the privilege level at which loads and stores execute
                    in all privilege modes.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 17, allowed: [17]}
                lsb: {type: integer, default: 17, allowed: [17]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            sum:
              type: dict
              schema:
                description:
                  type: string
                  default: Modifies the privilege with which S-mode loads and stores access
                    virtual memory.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 18, allowed: [18]}
                lsb: {type: integer, default: 18, allowed: [18]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            mxr:
              type: dict
              schema:
                description:
                  type: string
                  default: Modifies the privilege with which loads access virtual memory.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 19, allowed: [19]}
                lsb: {type: integer, default: 19, allowed: [19]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            tvm:
              type: dict
              schema:
                description:
                  type: string
                  default: Supports intercepting supervisor virtual-memory management
                    operations.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 20, allowed: [20]}
                lsb: {type: integer, default: 20, allowed: [20]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            tw:
              type: dict
              schema:
                description:
                  type: string
                  default: Supports intercepting the WFI instruction.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 21, allowed: [21]}
                lsb: {type: integer, default: 21, allowed: [21]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            tsr:
              type: dict
              schema:
                description:
                  type: string
                  default: Supports intercepting the supervisor exception return instruction.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 22, allowed: [22]}
                lsb: {type: integer, default: 22, allowed: [22]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            sd:
              type: dict
              schema:
                description:
                  type: string
                  default: Read-only bit that summarizes whether either the FS field or
                    XS field signals the presence of some dirty state.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 31, allowed: [31]}
                lsb: {type: integer, default: 31, allowed: [31]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: {ro_variable: {type: boolean}}
                  default: {ro_variable: True}
              default: {implemented: true}
            accessible:
              type: boolean
              default: false
              check_with: rv32_check
          default: {accessible: true}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            uie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the user mode interrupts.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 0, allowed: [0]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            sie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the supervisor mode interrupts.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 1, allowed: [1]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default: 
                    wlrl: [0:1]
              default: {implemented: false}
            mie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the machine mode interrupts.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 3, allowed: [3]}
                lsb: {type: integer, default: 3, allowed: [3]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: true}
            upie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the user mode interrupts prior to the trap.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 4, allowed: [4]}
                lsb: {type: integer, default: 4, allowed: [4]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            spie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the supervisor mode interrupts prior to
                    the trap.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 5, allowed: [5]}
                lsb: {type: integer, default: 5, allowed: [5]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default: 
                    wlrl: [0:1]
              default: {implemented: false}
            mpie:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the state of the machine mode interrupts prior to the
                    trap.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 7, allowed: [7]}
                lsb: {type: integer, default: 7, allowed: [7]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: true}
            spp:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the previous priority mode for supervisor.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 8, allowed: [8]}
                lsb: {type: integer, default: 8, allowed: [8]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default: 
                    wlrl: [0:1]
              default: {implemented: false}
            mpp:
              type: dict
              schema:
                description:
                  type: string
                  default: Stores the previous priority mode for machine.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 12, allowed: [12]}
                lsb: {type: integer, default: 11, allowed: [11]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - "0"
              default: {implemented: true}
            fs:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the status of the floating-point unit, including the
                    CSR fcsr and floating-point data registers.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 14, allowed: [14]}
                lsb: {type: integer, default: 13, allowed: [13]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  - schema: { warl: *ref_warl }
              default: {implemented: false}
            xs:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the status of additional user-mode extensions and associated
                    state.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 16, allowed: [16]}
                lsb: {type: integer, default: 15, allowed: [15]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: {ro_variable: {type: boolean}}
                  readonly: true
                  default: {ro_variable: true}
              default: {implemented: false}
            mprv:
              type: dict
              schema:
                description:
                  type: string
                  default: Modifies the privilege level at which loads and stores execute
                    in all privilege modes.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 17, allowed: [17]}
                lsb: {type: integer, default: 17, allowed: [17]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            sum:
              type: dict
              schema:
                description:
                  type: string
                  default: Modifies the privilege with which S-mode loads and stores access
                    virtual memory.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 18, allowed: [18]}
                lsb: {type: integer, default: 18, allowed: [18]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            mxr:
              type: dict
              schema:
                description:
                  type: string
                  default: Modifies the privilege with which loads access virtual memory.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 19, allowed: [19]}
                lsb: {type: integer, default: 19, allowed: [19]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            tvm:
              type: dict
              schema:
                description:
                  type: string
                  default: Supports intercepting supervisor virtual-memory management
                    operations.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 20, allowed: [20]}
                lsb: {type: integer, default: 20, allowed: [20]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            tw:
              type: dict
              schema:
                description:
                  type: string
                  default: Supports intercepting the WFI instruction.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 21, allowed: [21]}
                lsb: {type: integer, default: 21, allowed: [21]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: [0:1]
              default: {implemented: false}
            tsr:
              type: dict
              schema:
                description:
                  type: string
                  default: Supports intercepting the supervisor exception return instruction.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 22, allowed: [22]}
                lsb: {type: integer, default: 22, allowed: [22]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default: 
                    wlrl: [0:1]
              default: {implemented: false}
            sxl:
              type: dict
              schema:
                description:
                  type: string
                  default: Controls the value of xlen for Supervisor mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 35, allowed: [35]}
                lsb: {type: integer, default: 34, allowed: [34]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 0, min: 0}}
                  - schema: { warl: *ref_warl }
              default: {implemented: true}
            uxl:
              type: dict
              schema:
                description:
                  type: string
                  default: Controls the xlen for User mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 33, allowed: [33]}
                lsb: {type: integer, default: 32, allowed: [32]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 0, min: 0}}
                  - schema: { warl: *ref_warl }
              default: {implemented: true}
            sd:
              type: dict
              schema:
                description:
                  type: string
                  default: Read-only bit that summarizes whether either the FS field or
                    XS field signals the presence of some dirty state.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 63, allowed: [63]}
                lsb: {type: integer, default: 63, allowed: [63]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: {ro_variable: {type: boolean}}
                  default: {ro_variable: true}
              default: {implemented: true}
            accessible:
              type: boolean
              default: false
              check_with: rv64_check
          default: {accessible: true}
    mvendorid:
      type: dict
      schema:
        description:
          type: string
          default: 32-bit read-only register providing the JEDEC manufacturer ID of the
            provider of the core.
        address: {type: integer, default: 3857, allowed: [3857]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
          check_with:
          - max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with:
              - rv32_check
              - cannot_be_false_rv32
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              default:
                ro_constant: 0
            accessible:
              default: true
              check_with:
              - rv64_check
              - cannot_be_false_rv64
          default: {accessible: false}
    marchid:
      type: dict
      schema:
        description:
          type: string
          default: MXLEN-bit read-only register encoding the base microarchitecture of
            the hart.
        address: {type: integer, default: 3858, allowed: [3858]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
          check_with: max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with:
              - rv32_check
              - cannot_be_false_rv32
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              schema: {ro_constant: {type: integer, max:  18446744073709551615}}
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with:
              - rv64_check
              - cannot_be_false_rv64
          default: {accessible: false}
    mimpid:
      type: dict
      schema:
        description:
          type: string
          default: Provides a unique encoding of the version of the processor implementation.
        address: {type: integer, default: 3859, allowed: [3859]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
          check_with: max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              schema: {ro_constant: {type: integer, max:  0xFFFFFFFFFFFFFFFF}}
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with:
              - rv32_check
              - cannot_be_false_rv32
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              schema: {ro_constant: {type: integer, max:  18446744073709551615}}
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with:
              - rv64_check
              - cannot_be_false_rv64
          default: {accessible: false}
    mhartid:
      type: dict
      schema:
        description:
          type: string
          default: MXLEN-bit read-only register containing the integer ID of the hardware
            thread running the code.
        address: {type: integer, default: 3860, allowed: [3860]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
          check_with: max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with: rv32_check
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              schema: {ro_constant: {type: integer, max:  0xFFFFFFFFFFFFFFFF}}
              default:
                ro_constant: 0
            accessible:
              type: boolean
              default: true
              check_with: rv64_check
          default: {accessible: false}
    mtvec:
      type: dict
      schema:
        description:
          type: string
          default: MXLEN-bit read/write register that holds trap vector configuration.
        address: {type: integer, default: 773, allowed: [773]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          check_with:
          - max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            base:
              type: dict
              schema:
                description:
                  type: string
                  default: Vector base address.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 31, allowed: [31]}
                lsb: {type: integer, default: 2, allowed: [2]}
                implemented: {type: boolean, default: true, allowed: [true]}
                type:
                  type: dict
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  1073741823}}
                  - schema: {ro_variable: {type: boolean}}
                  - schema: { warl: *ref_warl }
            mode:
              type: dict
              schema:
                description:
                  type: string
                  default: Vector mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true, allowed: [true]}
                type:
                  type: dict
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  1}}
                  - schema: {ro_variable: {type: boolean}}
                  - schema: { warl: *ref_warl }
            accessible:
              type: boolean
              check_with:
              - rv32_check
              - cannot_be_false_rv32
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            base:
              type: dict
              schema:
                description:
                  type: string
                  default: Vector base address.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 63, allowed: [63]}
                lsb: {type: integer, default: 2, allowed: [2]}
                implemented: {type: boolean, default: true, allowed: [true]}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  4611686018427387903}}
                  - schema: {ro_variable: {type: boolean}}
                  - schema: { warl: *ref_warl }
              default: {implemented: true}
            mode:
              type: dict
              schema:
                description:
                  type: string
                  default: Vector mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true, allowed: [true]}
                type:
                  type: dict
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  1}}
                  - schema: {ro_variable: {type: boolean}}
                  - schema: { warl: *ref_warl }
            accessible:
              type: boolean
              check_with:
              - rv64_check
              - cannot_be_false_rv64
          default: {accessible: false}
    mideleg:
      type: dict
      schema:
        description:
          type: string
          default: Machine Interrupt delegation Register.
        address: {type: integer, default: 771, allowed: [771]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          check_with: max_length
          default: 0
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - "mideleg[31:0] in [0x00]"
                  wr_illegal:
                  - 'unchanged'
            accessible:
              type: boolean
              default: true
              check_with:
              - rv32_check
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - "mideleg[63:0] in [0x00]"
                  wr_illegal:
                  - 'unchanged'
            accessible:
              type: boolean
              default: true
              check_with:
              - rv64_check
          default: {accessible: false}
      check_with: mdeleg_checks
    medeleg:
      type: dict
      schema:
        description:
          type: string
          default: Machine Exception delegation Register.
        address: {type: integer, default: 770, allowed: [770]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
          check_with:
          - max_length
          - medeleg_reset
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - "medeleg[31:0] in [0x00]"
                  wr_illegal:
                  - 'unchanged'
            accessible:
              type: boolean
              default: true
              check_with:
              - rv32_check
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - "medeleg[63:0] in [0x00]"
                  wr_illegal:
                  - 'unchanged'
            accessible:
              type: boolean
              default: true
              check_with:
              - rv64_check
          default: {accessible: false}
      check_with: mdeleg_checks
    mip:
      type: dict
      schema:
        description:
          type: string
          default: The mip register is an MXLEN-bit read/write register containing information on pending interrupts.
        address: {type: integer, default: 836, allowed: [836]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          check_with: max_length
          default: 0
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            usip:
              type: dict
              schema:
                description:
                  type: string
                  default: User Software Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 0, allowed: [0]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            ssip:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor Software Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 1, allowed: [1]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            msip:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine Software Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 3, allowed: [3]}
                lsb: {type: integer, default: 3, allowed: [3]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: {ro_variable: {type: boolean, allowed: [true]}}
                  readonly: true
                  default: {ro_variable: true}
              default: {implemented: true}
            utip:
              type: dict
              schema:
                description:
                  type: string
                  default: User Timer Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 4, allowed: [4]}
                lsb: {type: integer, default: 4, allowed: [4]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            stip:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor Timer Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 5, allowed: [5]}
                lsb: {type: integer, default: 5, allowed: [5]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            mtip:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine Timer Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 7, allowed: [7]}
                lsb: {type: integer, default: 7, allowed: [7]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: {ro_variable: {type: boolean, allowed: [True]}}
                  readonly: true
                  default: {ro_variable: True}
              default: {implemented: true}
            ueip:
              type: dict
              schema:
                description:
                  type: string
                  default: User External Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 8, allowed: [8]}
                lsb: {type: integer, default: 8, allowed: [8]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            seip:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor External Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 9, allowed: [9]}
                lsb: {type: integer, default: 9, allowed: [9]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            meip:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine External Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 11, allowed: [11]}
                lsb: {type: integer, default: 11, allowed: [11]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: {ro_variable: {type: boolean, allowed: [True]}}
                  readonly: true
                  default: {ro_variable: True}
              default: {implemented: true}
            accessible:
              type: boolean
              default: false
              check_with: rv32_check
          required: true
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            usip:
              type: dict
              schema:
                description:
                  type: string
                  default: User Software Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 0, allowed: [0]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            ssip:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor Software Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 1, allowed: [1]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            msip:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine Software Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 3, allowed: [3]}
                lsb: {type: integer, default: 3, allowed: [3]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: {ro_variable: {type: boolean, allowed: [true]}}
                  readonly: true
                  default: {ro_variable: true}
              default: {implemented: true}
            utip:
              type: dict
              schema:
                description:
                  type: string
                  default: User Timer Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 4, allowed: [4]}
                lsb: {type: integer, default: 4, allowed: [4]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            stip:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor Timer Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 5, allowed: [5]}
                lsb: {type: integer, default: 5, allowed: [5]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            mtip:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine Timer Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 7, allowed: [7]}
                lsb: {type: integer, default: 7, allowed: [7]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: {ro_variable: {type: boolean, allowed: [True]}}
                  readonly: true
                  default: {ro_variable: True}
              default: {implemented: true}
            ueip:
              type: dict
              schema:
                description:
                  type: string
                  default: User External Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 8, allowed: [8]}
                lsb: {type: integer, default: 8, allowed: [8]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            seip:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor External Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 9, allowed: [9]}
                lsb: {type: integer, default: 9, allowed: [9]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl: 
                    - 0:1
              default: {implemented: False}
            meip:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine External Interrupt Pending.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 11, allowed: [11]}
                lsb: {type: integer, default: 11, allowed: [11]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  schema: {ro_variable: {type: boolean, allowed: [True]}}
                  readonly: true
                  default: {ro_variable: True}
              default: {implemented: true}
            accessible:
              type: boolean
              default: false
              check_with: rv64_check
          required: true
        
    mie:
      type: dict
      schema:
        description:
          type: string
          default: The mie register is an MXLEN-bit read/write register containing interrupt
            enable bits.
        address: {type: integer, default: 772, allowed: [772]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          check_with: max_length
          default: 0
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            usie:
              type: dict
              schema:
                description:
                  type: string
                  default: User Software Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 0, allowed: [0]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            ssie:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor Software Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 1, allowed: [1]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            msie:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine Software Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 3, allowed: [3]}
                lsb: {type: integer, default: 3, allowed: [3]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl: 
                    - 0x0:0x1
                  readonly: true
              default: {implemented: True}
            utie:
              type: dict
              schema:
                description:
                  type: string
                  default: User Timer Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 4, allowed: [4]}
                lsb: {type: integer, default: 4, allowed: [4]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            stie:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor Timer Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 5, allowed: [5]}
                lsb: {type: integer, default: 5, allowed: [5]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            mtie:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine Timer Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 7, allowed: [7]}
                lsb: {type: integer, default: 7, allowed: [7]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: { wlrl: *ref_wlrl }
                  default: 
                    wlrl: 
                    - 0:1
              default: {implemented: true}
            ueie:
              type: dict
              schema:
                description:
                  type: string
                  default: User External Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 8, allowed: [8]}
                lsb: {type: integer, default: 8, allowed: [8]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                     - 0:1
              default: {implemented: False}
            seie:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor External Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 9, allowed: [9]}
                lsb: {type: integer, default: 9, allowed: [9]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            meie:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine External Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 11, allowed: [11]}
                lsb: {type: integer, default: 11, allowed: [11]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: { wlrl: *ref_wlrl }
                  default: 
                    wlrl: [0:1]
              default: {implemented: true}
            accessible:
              type: boolean
              default: false
              check_with: rv32_check
          required: true
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            usie:
              type: dict
              schema:
                description:
                  type: string
                  default: User Software Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 0, allowed: [0]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            ssie:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor Software Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 1, allowed: [1]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            msie:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine Software Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 3, allowed: [3]}
                lsb: {type: integer, default: 3, allowed: [3]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl: 
                    - 0x0:0x1
                  readonly: true
              default: {implemented: True}
            utie:
              type: dict
              schema:
                description:
                  type: string
                  default: User Timer Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 4, allowed: [4]}
                lsb: {type: integer, default: 4, allowed: [4]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            stie:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor Timer Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 5, allowed: [5]}
                lsb: {type: integer, default: 5, allowed: [5]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            mtie:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine Timer Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 7, allowed: [7]}
                lsb: {type: integer, default: 7, allowed: [7]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: { wlrl: *ref_wlrl }
                  default: 
                    wlrl: 
                    - 0:1
              default: {implemented: true}
            ueie:
              type: dict
              schema:
                description:
                  type: string
                  default: User External Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 8, allowed: [8]}
                lsb: {type: integer, default: 8, allowed: [8]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                     - 0:1
              default: {implemented: False}
            seie:
              type: dict
              schema:
                description:
                  type: string
                  default: Supervisor External Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 9, allowed: [9]}
                lsb: {type: integer, default: 9, allowed: [9]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: False}
            meie:
              type: dict
              schema:
                description:
                  type: string
                  default: Machine External Interrupt enable.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 11, allowed: [11]}
                lsb: {type: integer, default: 11, allowed: [11]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  schema: { wlrl: *ref_wlrl }
                  default: 
                    wlrl: [0:1]
              default: {implemented: true}
            accessible:
              type: boolean
              default: false
              check_with: rv64_check
          required: true  
      required: true
    mscratch:
      type: dict
      schema:
        description:
          type: string
          default: The mscratch register is an MXLEN-bit read/write register dedicated
            for use by machine mode.
        address: {type: integer, default: 832, allowed: [832]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
          check_with: max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              - schema: {ro_variable: {type: boolean}}
              - schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - mscratch[31:0] in [0x00000000:0xFFFFFFFF]
                  wr_illegal:
                  - unchanged
            accessible:
              type: boolean
              default: true
              check_with: rv32_check
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  0xFFFFFFFFFFFFFFFF}}
              - schema: {ro_variable: {type: boolean}}
              - schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - mscratch[63:0] in [0x00000000:0xFFFFFFFFFFFFFFFF]
                  wr_illegal:
                  - unchanged
    
            accessible:
              default: true
              check_with: rv64_check
          default: {accessible: false}
    mepc:
      type: dict
      schema:
        description:
          type: string
          default: The mepc is a warl register that must be able to hold all valid physical
            and virtual addresses.
        address: {type: integer, default: 0x341, allowed: [0x341]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
          check_with: max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - mepc[31:0] in [0x00000000:0xFFFFFFFF]
                  wr_illegal:
                  - unchanged
    
            accessible:
              type: boolean
              default: true
              check_with: rv32_check
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - mepc[63:0] in [0x00000000:0xFFFFFFFFFFFFFFFF]
                  wr_illegal:
                  - unchanged
    
            accessible:
              type: boolean
              default: true
              check_with: rv64_check
          default: {accessible: false}
    mtval:
      type: dict
      schema:
        description:
          type: string
          default: The mtval is a warl register that holds the address of the instruction
            which caused the exception.
        address: {type: integer, default: 835, allowed: [835]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          default: 0
          check_with: max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - mtval[31:0] in [0x00000000:0xFFFFFFFF]
                  wr_illegal:
                  - unchanged
    
            accessible:
              type: boolean
              default: true
              check_with: rv32_check
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - mtval[63:0] in [0x00000000:0xFFFFFFFFFFFFFFFF]
                  wr_illegal:
                  - unchanged
    
            accessible:
              default: true
              check_with: rv64_check
          default: {accessible: false}
      required: true
    mcause:
      type: dict
      schema:
        description:
          type: string
          default: The mcause register stores the information regarding the trap.
        address: {type: integer, default: 834, allowed: [834]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val:
          type: integer
          check_with: max_length
          default: 0
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            interrupt:
              type: dict
              schema:
                description:
                  type: string
                  default: Indicates whether the trap was due to an interrupt.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 31, allowed: [31]}
                lsb: {type: integer, default: 31, allowed: [31]}
                implemented: {type: boolean, default: true, allowed: [true]}
                type:
                  type: dict
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl: 
                    - 0x0:0x1
                  readonly: True
              default: {implemented: true}
            exception_code:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the exception code.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 30, allowed: [30]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true, allowed: [true]}
                type:
                  type: dict
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl: 
                    - 0:15
              default: {implemented: true}
            accessible:
              type: boolean
              default: false
              check_with: rv32_check
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            interrupt:
              type: dict
              schema:
                description:
                  type: string
                  default: Indicates whether the trap was due to an interrupt.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 63, allowed: [63]}
                lsb: {type: integer, default: 63, allowed: [63]}
                implemented: {type: boolean, default: true, allowed: [true]}
                type:
                  type: dict
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl:
                    - 0:1
              default: {implemented: true}
            exception_code:
              type: dict
              schema:
                description:
                  type: string
                  default: Encodes the exception code.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 62, allowed: [62]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true, allowed: [true]}
                type:
                  type: dict
                  schema: { wlrl: *ref_wlrl }
                  default:
                    wlrl:
                    - 0:15
              default: {implemented: true}
            accessible:
              type: boolean
              default: false
              check_with: rv64_check
          default: {accessible: false}
    pmpcfg0:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A0, allowed: [0x3A0]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp0cfg: &pmp0
              type: dict
              schema:
                description: {type: string, default: pmp configuration bits}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 7, allowed: [7]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: false}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: {ro_constant: {type: integer, max:  0xFF}}
                    - schema: { warl: *ref_warl }
                  default:
                    ro_constant: 0
              default: {implemented: True}
            pmp1cfg: &pmp1
              type: dict
              schema:
                description: {type: string, default: pmp configuration bits}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 15, allowed: [15]}
                lsb: {type: integer, default: 8, allowed: [8]}
                implemented: {type: boolean, default: false}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: {ro_constant: {type: integer, max:  0xFF}}
                    - schema: { warl: *ref_warl }
                  default:
                    ro_constant: 0
              default: {implemented: True}
            pmp2cfg: &pmp2
              type: dict
              schema:
                description: {type: string, default: pmp configuration bits}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 23, allowed: [23]}
                lsb: {type: integer, default: 16, allowed: [16]}
                implemented: {type: boolean, default: false}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: {ro_constant: {type: integer, max:  0xFF}}
                    - schema: { warl: *ref_warl }
                  default:
                    ro_constant: 0
              default: {implemented: True}
            pmp3cfg: &pmp3
              type: dict
              schema:
                description: {type: string, default: pmp configuration bits}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 31, allowed: [31]}
                lsb: {type: integer, default: 24, allowed: [24]}
                implemented: {type: boolean, default: false}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: {ro_constant: {type: integer, max:  0xFF}}
                    - schema: { warl: *ref_warl }
                  default:
                    ro_constant: 0
              default: {implemented: True}
        rv64:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv64_check}
            fields: {type: list, default: []}
            pmp0cfg: 
              <<: *pmp0
            pmp1cfg: 
              <<: *pmp1
            pmp2cfg: 
              <<: *pmp2
            pmp3cfg: 
              <<: *pmp3
            pmp4cfg: &pmp4
              type: dict
              schema:
                description: {type: string, default: pmp configuration bits}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 39, allowed: [39]}
                lsb: {type: integer, default: 32, allowed: [32]}
                implemented: {type: boolean, default: false}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  0xFF}}
                  - schema: { warl: *ref_warl }
                  default:
                    ro_constant: 0
              default: {implemented: True}
            pmp5cfg: &pmp5
              type: dict
              schema:
                description: {type: string, default: pmp configuration bits}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 47, allowed: [47]}
                lsb: {type: integer, default: 40, allowed: [40]}
                implemented: {type: boolean, default: false}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  0xFF}}
                  - schema: { warl: *ref_warl }
                  default:
                    ro_constant: 0
              default: {implemented: True}
            pmp6cfg: &pmp6
              type: dict
              schema:
                description: {type: string, default: pmp configuration bits}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 55, allowed: [55]}
                lsb: {type: integer, default: 48, allowed: [48]}
                implemented: {type: boolean, default: false}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  0xFF}}
                  - schema: { warl: *ref_warl }
                  default:
                    ro_constant: 0
              default: {implemented: True}
            pmp7cfg: &pmp7
              type: dict
              schema:
                description: {type: string, default: pmp configuration bits}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 63, allowed: [63]}
                lsb: {type: integer, default: 56, allowed: [56]}
                implemented: {type: boolean, default: false}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max:  0xFF}}
                  - schema: { warl: *ref_warl }
                  default:
                    ro_constant: 0
              default: {implemented: True}
                  
    pmpcfg1:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp4cfg: 
              <<: *pmp0
            pmp5cfg: 
              <<: *pmp1
            pmp6cfg: 
              <<: *pmp2
            pmp7cfg: 
              <<: *pmp3
        rv64:
          type: dict
          schema:
            accessible:
              type: boolean
              default: False
          default: {accessible: False}
    pmpcfg2:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp8cfg: 
              <<: *pmp0
            pmp9cfg: 
              <<: *pmp1
            pmp10cfg: 
              <<: *pmp2
            pmp11cfg: 
              <<: *pmp3
        rv64:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv64_check}
            fields: {type: list, default: []}
            pmp8cfg: 
              <<: *pmp0
            pmp9cfg: 
              <<: *pmp1
            pmp10cfg: 
              <<: *pmp2
            pmp11cfg: 
              <<: *pmp3
            pmp12cfg: 
              <<: *pmp4
            pmp13cfg: 
              <<: *pmp5
            pmp14cfg: 
              <<: *pmp6
            pmp15cfg: 
              <<: *pmp7
    pmpcfg3:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp12cfg: 
              <<: *pmp0
            pmp13cfg: 
              <<: *pmp1
            pmp14cfg: 
              <<: *pmp2
            pmp15cfg: 
              <<: *pmp3
        rv64:
          type: dict
          schema:
            accessible:
              default: False
          default: {accessible: False}
    pmpcfg4:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp16cfg: 
              <<: *pmp0
            pmp17cfg: 
              <<: *pmp1
            pmp18cfg: 
              <<: *pmp2
            pmp19cfg: 
              <<: *pmp3
        rv64:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv64_check}
            fields: {type: list, default: []}
            pmp16cfg: 
              <<: *pmp0
            pmp17cfg: 
              <<: *pmp1
            pmp18cfg: 
              <<: *pmp2
            pmp19cfg: 
              <<: *pmp3
            pmp20cfg: 
              <<: *pmp4
            pmp21cfg: 
              <<: *pmp5
            pmp22cfg: 
              <<: *pmp6
            pmp23cfg: 
              <<: *pmp7
    pmpcfg5:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp20cfg: 
              <<: *pmp0
            pmp21cfg: 
              <<: *pmp1
            pmp22cfg: 
              <<: *pmp2
            pmp23cfg: 
              <<: *pmp3
        rv64:
          type: dict
          schema:
            accessible:
              default: False
          default: {accessible: False}
    pmpcfg6:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp24cfg: 
              <<: *pmp0
            pmp25cfg: 
              <<: *pmp1
            pmp26cfg: 
              <<: *pmp2
            pmp27cfg: 
              <<: *pmp3
        rv64:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv64_check}
            fields: {type: list, default: []}
            pmp24cfg: 
              <<: *pmp0
            pmp25cfg: 
              <<: *pmp1
            pmp26cfg: 
              <<: *pmp2
            pmp27cfg: 
              <<: *pmp3
            pmp28cfg: 
              <<: *pmp4
            pmp29cfg: 
              <<: *pmp5
            pmp30cfg: 
              <<: *pmp6
            pmp31cfg: 
              <<: *pmp7
    pmpcfg7:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp28cfg: 
              <<: *pmp0
            pmp29cfg: 
              <<: *pmp1
            pmp30cfg: 
              <<: *pmp2
            pmp31cfg: 
              <<: *pmp3
        rv64:
          type: dict
          schema:
            accessible:
              default: False
          default: {accessible: False}
    pmpcfg8:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp32cfg: 
              <<: *pmp0
            pmp33cfg: 
              <<: *pmp1
            pmp34cfg: 
              <<: *pmp2
            pmp35cfg: 
              <<: *pmp3
        rv64:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv64_check}
            fields: {type: list, default: []}
            pmp32cfg: 
              <<: *pmp0
            pmp33cfg: 
              <<: *pmp1
            pmp34cfg: 
              <<: *pmp2
            pmp35cfg: 
              <<: *pmp3
            pmp36cfg: 
              <<: *pmp4
            pmp37cfg: 
              <<: *pmp5
            pmp38cfg: 
              <<: *pmp6
            pmp39cfg: 
              <<: *pmp7
    pmpcfg9:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp36cfg: 
              <<: *pmp0
            pmp37cfg: 
              <<: *pmp1
            pmp38cfg: 
              <<: *pmp2
            pmp39cfg: 
              <<: *pmp3
        rv64:
          type: dict
          schema:
            accessible:
              default: False
          default: {accessible: False}
    pmpcfg10:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp40cfg: 
              <<: *pmp0
            pmp41cfg: 
              <<: *pmp1
            pmp42cfg: 
              <<: *pmp2
            pmp43cfg: 
              <<: *pmp3
        rv64:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv64_check}
            fields: {type: list, default: []}
            pmp40cfg: 
              <<: *pmp0
            pmp41cfg: 
              <<: *pmp1
            pmp42cfg: 
              <<: *pmp2
            pmp43cfg: 
              <<: *pmp3
            pmp44cfg: 
              <<: *pmp4
            pmp45cfg: 
              <<: *pmp5
            pmp46cfg: 
              <<: *pmp6
            pmp47cfg: 
              <<: *pmp7
    pmpcfg11:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp44cfg: 
              <<: *pmp0
            pmp45cfg: 
              <<: *pmp1
            pmp46cfg: 
              <<: *pmp2
            pmp47cfg: 
              <<: *pmp3
        rv64:
          type: dict
          schema:
            accessible:
              default: False
          default: {accessible: False}
    pmpcfg12:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp48cfg: 
              <<: *pmp0
            pmp49cfg: 
              <<: *pmp1
            pmp50cfg: 
              <<: *pmp2
            pmp51cfg: 
              <<: *pmp3
        rv64:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv64_check}
            fields: {type: list, default: []}
            pmp48cfg: 
              <<: *pmp0
            pmp49cfg: 
              <<: *pmp1
            pmp50cfg: 
              <<: *pmp2
            pmp51cfg: 
              <<: *pmp3
            pmp52cfg: 
              <<: *pmp4
            pmp53cfg: 
              <<: *pmp5
            pmp54cfg: 
              <<: *pmp6
            pmp55cfg: 
              <<: *pmp7
    pmpcfg13:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp52cfg: 
              <<: *pmp0
            pmp53cfg: 
              <<: *pmp1
            pmp54cfg: 
              <<: *pmp2
            pmp55cfg: 
              <<: *pmp3
        rv64:
          type: dict
          schema:
            accessible:
              default: False
          default: {accessible: False}
    pmpcfg14:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp56cfg: 
              <<: *pmp0
            pmp57cfg: 
              <<: *pmp1
            pmp58cfg: 
              <<: *pmp2
            pmp59cfg: 
              <<: *pmp3
        rv64:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv64_check}
            fields: {type: list, default: []}
            pmp56cfg: 
              <<: *pmp0
            pmp57cfg: 
              <<: *pmp1
            pmp58cfg: 
              <<: *pmp2
            pmp59cfg: 
              <<: *pmp3
            pmp60cfg: 
              <<: *pmp4
            pmp61cfg: 
              <<: *pmp5
            pmp62cfg: 
              <<: *pmp6
            pmp63cfg: 
              <<: *pmp7
    pmpcfg15:
      type: dict
      schema:
        description: {type: string, default: PMP configuration register}
        address: {type: integer, default: 0x3A1, allowed: [0x3A1]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          default: {accessible: True}
          schema:
            accessible: {type: boolean, default: true, check_with: rv32_check}
            fields: {type: list, default: []}
            pmp60cfg: 
              <<: *pmp0
            pmp61cfg: 
              <<: *pmp1
            pmp62cfg: 
              <<: *pmp2
            pmp63cfg: 
              <<: *pmp3
        rv64:
          type: dict
          schema:
            accessible:
              default: False
          default: {accessible: False}
    mcounteren:
      type: dict
      schema:
        description:
          type: string
          default: The mcounteren is a 32-bit register that controls the availability
            of the hardware performance-monitoring counters to the next-lowest privileged
            mode.
        address: {type: integer, default: 0x306, allowed: [0x306]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, check_with: max_length, default: 0}
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - mcounteren[31:0] in [0x00000000]
                  wr_illegal:
                  - unchanged
            accessible:
              type: boolean
              default: true
              check_with: rv32_check
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              schema: { warl: *ref_warl }
              default:
                warl:
                  dependency_fields: []
                  legal:
                  - mcounteren[31:0] in [0x00000000]
                  wr_illegal:
                  - unchanged
            accessible:
              default: true
              check_with: rv64_check
          default: {accessible: false}
    mcountinhibit:
      type: dict
      schema:
        description:
          type: string
          default: The mcountinhibit is a 32-bit WARL register that controls which of
            the hardware performance-monitoring counters increment.
        address: {type: integer, default: 0x320, allowed: [0x320]}
        priv_mode: {type: string, default: M, allowed: [M]}
        reset-val: {type: integer, default: 0, check_with: max_length}
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              - schema: { warl: *ref_warl }
              default: {ro_constant: 0}
            accessible: { type: boolean, default: true, check_with: rv32_check}
          default: {accessible: false}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 31, allowed: [31]}
            lsb: {type: integer, default: 0, allowed: [0]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              - schema: { warl: *ref_warl }
              default:
                ro_constant: 0
            accessible: { default: true, check_with: rv64_check}
          default: {accessible: false}
    mcycle:
      type: dict
      schema:
        description:
          type: string
          default: Counts the number of clock cycles executed from an arbitrary point in time.
        address: {type: integer, default: 0xB00, allowed: [0xB00]}
        <<: *gen_flatschema
    minstret: 
      type: dict
      schema:
        description:
          type: string
          default: Counts the number of instructions completed from an arbitrary point in time.
        address: {type: integer, default: 0xB02, allowed: [0xB02]}
        <<: *gen_flatschema
    mhpmevent3:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent3 is a MXLEN-bit event register which controls mhpmcounter3.
        address: {type: integer, default: 0x323, allowed: [0x323]}
    mhpmcounter3:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter3 is a 64-bit counter. Returns lower 32 bits in RV32I mode.
        address: {type: integer, default: 0xB03, allowed: [0xB03]}
    mhpmcounter3h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter3h returns the upper half word in RV32I systems.
        address: {type: integer, default: 0xB83, allowed: [0xB83]}
    mhpmevent4:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent4 is a MXLEN-bit event register which controls mhpmcounter4.
        address: {type: integer, default: 0x324, allowed: [0x324]}
    mhpmcounter4:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter4 is a 64-bit counter. Returns lower 42 bits in RV42I mode.
        address: {type: integer, default: 0xB04, allowed: [0xB04]}
    mhpmcounter4h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter4h returns the upper half word in RV42I systems.
        address: {type: integer, default: 0xB84, allowed: [0xB84]}
    mhpmevent5:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent5 is a MXLEN-bit event register which controls mhpmcounter5.
        address: {type: integer, default: 0x325, allowed: [0x325]}
    mhpmcounter5:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter5 is a 64-bit counter. Returns lower 52 bits in RV52I mode.
        address: {type: integer, default: 0xB05, allowed: [0xB05]}
    mhpmcounter5h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter5h returns the upper half word in RV52I systems.
        address: {type: integer, default: 0xB85, allowed: [0xB85]}
    mhpmevent6:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent6 is a MXLEN-bit event register which controls mhpmcounter6.
        address: {type: integer, default: 0x326, allowed: [0x326]}
    mhpmcounter6:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter6 is a 64-bit counter. Returns lower 62 bits in RV62I
            mode.
        address: {type: integer, default: 0xB06, allowed: [0xB06]}
    mhpmcounter6h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter6h returns the upper half word in RV62I systems.
        address: {type: integer, default: 0xB86, allowed: [0xB86]}
    mhpmevent7:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent7 is a MXLEN-bit event register which controls mhpmcounter7.
        address: {type: integer, default: 0x327, allowed: [0x327]}
    mhpmcounter7:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter7 is a 64-bit counter. Returns lower 72 bits in RV72I mode.
        address: {type: integer, default: 0xB07, allowed: [0xB07]}
    mhpmcounter7h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter7h returns the upper half word in RV72I systems.
        address: {type: integer, default: 0xB87, allowed: [0xB87]}
    mhpmevent8:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent8 is a MXLEN-bit event register which controls mhpmcounter8.
        address: {type: integer, default: 0x328, allowed: [0x328]}
    mhpmcounter8:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter8 is a 64-bit counter. Returns lower 82 bits in RV82I mode.
        address: {type: integer, default: 0xB08, allowed: [0xB08]}
    mhpmcounter8h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter8h returns the upper half word in RV82I systems.
        address: {type: integer, default: 0xB88, allowed: [0xB88]}
    mhpmevent9:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent9 is a MXLEN-bit event register which controls mhpmcounter9.
        address: {type: integer, default: 0x329, allowed: [0x329]}
    mhpmcounter9:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter9 is a 64-bit counter. Returns lower 32 bits in RV32I mode.
        address: {type: integer, default: 0xB09, allowed: [0xB09]}
    mhpmcounter9h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter9h returns the upper half word in RV32I systems.
        address: {type: integer, default: 0xB89, allowed: [0xB89]}
    mhpmevent10:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent10 is a MXLEN-bit event register which controls mhpmcounter10.
        address: {type: integer, default: 0x32a, allowed: [0x32a]}
    mhpmcounter10:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter10 is a 64-bit counter. Returns lower 102 bits in RV102I mode.
        address: {type: integer, default: 0xB0A, allowed: [0xB0A]}
    mhpmcounter10h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter10h returns the upper half word in RV102I systems.
        address: {type: integer, default: 0xB8A, allowed: [0xB8A]}
    mhpmevent11:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent11 is a MXLEN-bit event register which controls mhpmcounter11.
        address: {type: integer, default: 0x32b, allowed: [0x32b]}
    mhpmcounter11:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter11 is a 64-bit counter. Returns lower 112 bits in RV112I mode.
        address: {type: integer, default: 0xB0B, allowed: [0xB0B]}
    mhpmcounter11h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter11h returns the upper half word in RV112I systems.
        address: {type: integer, default: 0xB8B, allowed: [0xB8B]}
    mhpmevent12:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent12 is a MXLEN-bit event register which controls mhpmcounter12.
        address: {type: integer, default: 0x32c, allowed: [0x32c]}
    mhpmcounter12:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter12 is a 64-bit counter. Returns lower 122 bits in RV122I mode.
        address: {type: integer, default: 0xB0C, allowed: [0xB0C]}
    mhpmcounter12h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter12h returns the upper half word in RV122I systems.
        address: {type: integer, default: 0xB8C, allowed: [0xB8C]}
    mhpmevent13:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent13 is a MXLEN-bit event register which controls mhpmcounter13.
        address: {type: integer, default: 0x32d, allowed: [0x32d]}
    mhpmcounter13:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter13 is a 64-bit counter. Returns lower 132 bits in RV132I mode.
        address: {type: integer, default: 0xB0D, allowed: [0xB0D]}
    mhpmcounter13h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter13h returns the upper half word in RV132I systems.
        address: {type: integer, default: 0xB8D, allowed: [0xB8D]}
    mhpmevent14:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent14 is a MXLEN-bit event register which controls mhpmcounter14.
        address: {type: integer, default: 0x32e, allowed: [0x32e]}
    mhpmcounter14:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter14 is a 64-bit counter. Returns lower 142 bits in RV142I mode.
        address: {type: integer, default: 0xB0E, allowed: [0xB0E]}
    mhpmcounter14h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter14h returns the upper half word in RV142I systems.
        address: {type: integer, default: 0xB8E, allowed: [0xB8E]}
    mhpmevent15:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent15 is a MXLEN-bit event register which controls mhpmcounter15.
        address: {type: integer, default: 0x32f, allowed: [0x32f]}
    mhpmcounter15:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter15 is a 64-bit counter. Returns lower 152 bits in RV152I mode.
        address: {type: integer, default: 0xB0F, allowed: [0xB0F]}
    mhpmcounter15h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter15h returns the upper half word in RV152I systems.
        address: {type: integer, default: 0xB8F, allowed: [0xB8F]}
    mhpmevent16:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent16 is a MXLEN-bit event register which controls mhpmcounter16.
        address: {type: integer, default: 0x330, allowed: [0x330]}
    mhpmcounter16:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter16 is a 64-bit counter. Returns lower 162 bits in RV162I mode.
        address: {type: integer, default: 0xB10, allowed: [0xB10]}
    mhpmcounter16h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter16h returns the upper half word in RV162I systems.
        address: {type: integer, default: 0xB90, allowed: [0xB90]}
    mhpmevent17:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent17 is a MXLEN-bit event register which controls mhpmcounter17.
        address: {type: integer, default: 0x331, allowed: [0x331]}
    mhpmcounter17:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter17 is a 64-bit counter. Returns lower 172 bits in RV172I mode.
        address: {type: integer, default: 0xB11, allowed: [0xB11]}
    mhpmcounter17h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter17h returns the upper half word in RV172I systems.
        address: {type: integer, default: 0xB91, allowed: [0xB91]}
    mhpmevent18:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent18 is a MXLEN-bit event register which controls mhpmcounter18.
        address: {type: integer, default: 0x332, allowed: [0x332]}
    mhpmcounter18:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter18 is a 64-bit counter. Returns lower 182 bits in RV182I mode.
        address: {type: integer, default: 0xB12, allowed: [0xB12]}
    mhpmcounter18h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter18h returns the upper half word in RV182I systems.
        address: {type: integer, default: 0xB92, allowed: [0xB92]}
    mhpmevent19:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent19 is a MXLEN-bit event register which controls mhpmcounter19.
        address: {type: integer, default: 0x333, allowed: [0x333]}
    mhpmcounter19:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter19 is a 64-bit counter. Returns lower 32 bits in RV32I mode.
        address: {type: integer, default: 0xB13, allowed: [0xB13]}
    mhpmcounter19h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter19h returns the upper half word in RV32I systems.
        address: {type: integer, default: 0xB93, allowed: [0xB93]}
    mhpmevent20:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent20 is a MXLEN-bit event register which controls mhpmcounter20.
        address: {type: integer, default: 0x334, allowed: [0x334]}
    mhpmcounter20:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter20 is a 64-bit counter. Returns lower 202 bits in RV202I mode.
        address: {type: integer, default: 0xB14, allowed: [0xB14]}
    mhpmcounter20h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter20h returns the upper half word in RV202I systems.
        address: {type: integer, default: 0xB94, allowed: [0xB94]}
    mhpmevent21:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent21 is a MXLEN-bit event register which controls mhpmcounter21.
        address: {type: integer, default: 0x335, allowed: [0x335]}
    mhpmcounter21:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter21 is a 64-bit counter. Returns lower 212 bits in RV212I mode.
        address: {type: integer, default: 0xB15, allowed: [0xB15]}
    mhpmcounter21h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter21h returns the upper half word in RV212I systems.
        address: {type: integer, default: 0xB95, allowed: [0xB95]}
    mhpmevent22:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent22 is a MXLEN-bit event register which controls mhpmcounter22.
        address: {type: integer, default: 0x336, allowed: [0x336]}
    mhpmcounter22:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter22 is a 64-bit counter. Returns lower 222 bits in RV222I mode.
        address: {type: integer, default: 0xB16, allowed: [0xB16]}
    mhpmcounter22h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter22h returns the upper half word in RV222I systems.
        address: {type: integer, default: 0xB96, allowed: [0xB96]}
    mhpmevent23:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent23 is a MXLEN-bit event register which controls mhpmcounter23.
        address: {type: integer, default: 0x337, allowed: [0x337]}
    mhpmcounter23:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter23 is a 64-bit counter. Returns lower 232 bits in RV232I mode.
        address: {type: integer, default: 0xB17, allowed: [0xB17]}
    mhpmcounter23h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter23h returns the upper half word in RV232I systems.
        address: {type: integer, default: 0xB97, allowed: [0xB97]}
    mhpmevent24:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent24 is a MXLEN-bit event register which controls mhpmcounter24.
        address: {type: integer, default: 0x338, allowed: [0x338]}
    mhpmcounter24:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter24 is a 64-bit counter. Returns lower 242 bits in RV242I mode.
        address: {type: integer, default: 0xB18, allowed: [0xB18]}
    mhpmcounter24h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter24h returns the upper half word in RV242I systems.
        address: {type: integer, default: 0xB98, allowed: [0xB98]}
    mhpmevent25:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent25 is a MXLEN-bit event register which controls mhpmcounter25.
        address: {type: integer, default: 0x339, allowed: [0x339]}
    mhpmcounter25:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter25 is a 64-bit counter. Returns lower 252 bits in RV252I mode.
        address: {type: integer, default: 0xB19, allowed: [0xB19]}
    mhpmcounter25h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter25h returns the upper half word in RV252I systems.
        address: {type: integer, default: 0xB99, allowed: [0xB99]}
    mhpmevent26:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent26 is a MXLEN-bit event register which controls mhpmcounter26.
        address: {type: integer, default: 0x33a, allowed: [0x33a]}
    mhpmcounter26:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter26 is a 64-bit counter. Returns lower 262 bits in RV262I mode.
        address: {type: integer, default: 0xB1A, allowed: [0xB1A]}
    mhpmcounter26h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter26h returns the upper half word in RV262I systems.
        address: {type: integer, default: 0xB9A, allowed: [0xB9A]}
    mhpmevent27:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent27 is a MXLEN-bit event register which controls mhpmcounter27.
        address: {type: integer, default: 0x33b, allowed: [0x33b]}
    mhpmcounter27:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter27 is a 64-bit counter. Returns lower 272 bits in RV272I mode.
        address: {type: integer, default: 0xB1B, allowed: [0xB1B]}
    mhpmcounter27h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter27h returns the upper half word in RV272I systems.
        address: {type: integer, default: 0xB9B, allowed: [0xB9B]}
    mhpmevent28:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent28 is a MXLEN-bit event register which controls mhpmcounter28.
        address: {type: integer, default: 0x33c, allowed: [0x33c]}
    mhpmcounter28:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter28 is a 64-bit counter. Returns lower 282 bits in RV282I mode.
        address: {type: integer, default: 0xB1C, allowed: [0xB1C]}
    mhpmcounter28h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter28h returns the upper half word in RV282I systems.
        address: {type: integer, default: 0xB9C, allowed: [0xB9C]}
    mhpmevent29:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent29 is a MXLEN-bit event register which controls mhpmcounter29.
        address: {type: integer, default: 0x33d, allowed: [0x33d]}
    mhpmcounter29:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter29 is a 64-bit counter. Returns lower 32 bits in RV32I mode.
        address: {type: integer, default: 0xB1D, allowed: [0xB1D]}
    mhpmcounter29h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter29h returns the upper half word in RV32I systems.
        address: {type: integer, default: 0xB9D, allowed: [0xB9D]}
    mhpmevent30:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent30 is a MXLEN-bit event register which controls mhpmcounter30.
        address: {type: integer, default: 0x33e, allowed: [0x33e]}
    mhpmcounter30:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter30 is a 64-bit counter. Returns lower 302 bits in RV302I mode.
        address: {type: integer, default: 0xB1E, allowed: [0xB1E]}
    mhpmcounter30h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter30h returns the upper half word in RV302I systems.
        address: {type: integer, default: 0xB9E, allowed: [0xB9E]}
    mhpmevent31:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmevent31 is a MXLEN-bit event register which controls mhpmcounter31.
        address: {type: integer, default: 0x33f, allowed: [0x33f]}
    mhpmcounter31:
      type: dict
      schema:
        <<: *gen_flatschema
        description:
          type: string
          default: The mhpmcounter31 is a 64-bit counter. Returns lower 312 bits in RV312I mode.
        address: {type: integer, default: 0xB1F, allowed: [0xB1F]}
    mhpmcounter31h:
      type: dict
      schema:
        <<: *gen_flatschema32
        description:
          type: string
          default: The mhpmcounter31h returns the upper half word in RV312I systems.
        address: {type: integer, default: 0xB9F, allowed: [0xB9F]}
    sedeleg:
      type: dict
      schema:
        description:
          type: string
          default: sedeleg
        address: {type: integer, default: 258, allowed: [258]}
        reset-val:
          type: integer
          check_with:
          - max_length
          - sedeleg_reset
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 2, allowed: [2]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  0xFFFFFFFF}}
              - schema: {ro_variable: {type: boolean}}
              - schema: { warl: *ref_warl }
            accessible: { type: boolean, default: true, check_with: [rv32_check, s_check] }
          default: {accessible: true}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 2, allowed: [2]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  4611686018427387903}}
              - schema: {ro_variable: {type: boolean}}
              - schema: { warl: *ref_warl }
            accessible: { type: boolean, default: true, check_with: [rv64_check, s_check]}
          default: {accessible: true}
      check_with: ndeleg_checks
    sideleg:
      type: dict
      schema:
        description:
          type: string
          default: sideleg
        address: {type: integer, default: 259, allowed: [259]}
        reset-val:
          type: integer
          check_with: max_length
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 2, allowed: [2]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  4611686018427387903}}
              - schema: {ro_variable: {type: boolean}}
              - schema: { warl: *ref_warl }
            accessible: { type: boolean, default: true, check_with: [rv32_check, s_check] }
          default: {accessible: true}
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            shadow: {type: string, default: , nullable: True}
            msb: {type: integer, default: 63, allowed: [63]}
            lsb: {type: integer, default: 2, allowed: [2]}
            type:
              type: dict
              check_with: wr_illegal
              oneof:
              - schema: {ro_constant: {type: integer, max:  4611686018427387903}}
              - schema: {ro_variable: {type: boolean}}
              - schema: { warl: *ref_warl }
            accessible:
              type: boolean
              default: true
              check_with: [rv64_check, s_check]
          default: {accessible: true}
      check_with: ndeleg_checks
